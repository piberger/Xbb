#!! ------------------------
#!! GENERAL CONFIGURATION
#!! -------------------------

[General]
#Set to True or False to display debug messages
Debug: True

MVAtype = DNN

electronMVA80 = Electron_mvaFall17V2Iso_WP80 
electronMVA90 = Electron_mvaFall17V2so_WP90
electronMVA = <!General|electronMVA80!>


[Configuration]
usePythonXrootD      = True
outputTreeBasketSize = 8000
haddTargetNumEvents  = 16000
files_per_job        = 50
channel              = Wlv
TreeCopierPSI        = True
nprocesses           = 0
run_locally          = False

# NanoAOD format
treeName = Events
AllowDuplicateTrees = True
countsFromAutoPU = False

[SubmitOptions]
submitScriptSpecialOptions = {'sysnew': ' -l h_vmem=6g '}

[Analysis]

tag  = 13TeV

# BDT to discriminate Signal and Background
#!! If this Flag is used then 50% of MC samples will go in training and the rest will be scaled up by a factor of 2.
#!! if you train on 50% but then set it to 'False' while writing DC, then you get your biased training samples in the limit!!!
#!! be sure to have this right !!!
;#When computing SF from CR, set this flag to false
;if one wants to use Mjj -> put to False
;Rescale MC by factor 2 if true
TrainFlag = True

;Current BDT FOM: Cls of train/vs CLs of test sample. To produce the DC on train sample, set this flag to True.
;!!!IMPORTANT: BE SURE TO HAVE "UseTrainSample = False" WHEN COMPUTING THE FINAL LIMIT !!!
UseTrainSample = False

;ALWAYS set to False, unless training to produce correlation plots
Data_as_signal = False


[Prep]
#VHbb = ['VHbbCommon.Clean', 'Prep.Selection', 'VHbbCommon.isData','VHbbCommon.isSignal','VHbbCommon.isWH','VHbbCommon.HeppyStyleGen','VHbbCommon.genBstatus','VHbbCommon.SampleGroup']
#VHbb = ['VHbbCommon.Clean','VHbbCommon.JetSmearer','VHbbCommon.METXY','Prep.Selection', 'VHbbCommon.isData','VHbbCommon.isSignal','VHbbCommon.isWH','VHbbCommon.HeppyStyleGen','VHbbCommon.genBstatus','VHbbCommon.SampleGroup']
Step1           = ['VHbbCommon.Clean','VHbbCommon.JetSmearer','VHbbCommon.JECcorrelator','Prep.LeptonSelection']
LeptonSelection = VHbbSelection.VHbbSelection(year="2018", channels=["Wln"], idWmn=None, idWen=None, skipJetSelection=True, vpt0lep=130.0, vpt1lep=110.0, vpt2lep=75.0)

Step2           = ['VHbbCommon.METXY','VHbbCommon.mSD_scale_res_shift','Prep.Selection', 'VHbbCommon.isData','VHbbCommon.isSignal','VHbbCommon.isWH','VHbbCommon.HeppyStyleGen','VHbbCommon.genBstatus','Prep.newBranches','VHbbCommon.VReco'] 
VHbb = ['VHbbCommon.Clean', 'VHbbCommon.JetSmearer_V12', 'VHbbCommon.METXY', 'VHbbCommon.mSD_scale_res_shift', 'Prep.Selection', 'VHbbCommon.isData','VHbbCommon.isSignal','VHbbCommon.isWH','VHbbCommon.HeppyStyleGen','VHbbCommon.genBstatus', 'Prep.newBranches', 'VHbbCommon.VReco']
Selection = VHbbSelection.VHbbSelection(year="2018", channels=["Wln"], idWmn=None, idWen=None)

# new branches
newBranches = BranchTools.TreeFormulas({
    'Lepton_pt':  'Alt$((Vtype==2)*Muon_pt[vLidx[0]],0)   + Alt$((Vtype==3)*Electron_pt[vLidx[0]],0)',
    'Lepton_phi': 'Alt$((Vtype==2)*Muon_phi[vLidx[0]],0)  + Alt$((Vtype==3)*Electron_phi[vLidx[0]],0)',
    'Lepton_eta': 'Alt$((Vtype==2)*Muon_eta[vLidx[0]],0)  + Alt$((Vtype==3)*Electron_eta[vLidx[0]],0)',
    'nAddLep15_2p5':      {'formula':'Sum$(Muon_pt>15&&abs(Muon_eta)<2.5&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>15&&abs(Electron_eta)<2.5&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep20_2p5':      {'formula':'Sum$(Muon_pt>20&&abs(Muon_eta)<2.5&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>20&&abs(Electron_eta)<2.5&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep25_2p5':      {'formula':'Sum$(Muon_pt>25&&abs(Muon_eta)<2.5&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>25&&abs(Electron_eta)<2.5&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep15':          {'formula':'Sum$(Muon_pt>15&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>15&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep20':          {'formula':'Sum$(Muon_pt>20&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>20&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep25':          {'formula':'Sum$(Muon_pt>25&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>25&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'htJet30': {'formula': 'Sum$(Jet_Pt*(Jet_Pt >30 && Jet_puId > 0 && Jet_lepFilter))', 'type': 'f'},
    'dPhiLepMet':   {'formula': 'abs(TVector2::Phi_mpi_pi(MET_Phi-(Alt$((Vtype==2)*Muon_phi[vLidx[0]],0) + Alt$((Vtype==3)*Electron_phi[vLidx[0]],0))))', 'type': 'f'},
    'dPhiLepMetv2': {'formula': 'abs(VHbb::deltaPhi(MET_Phi,(Alt$((Vtype==2)*Muon_phi[vLidx[0]],0) + Alt$((Vtype==3)*Electron_phi[vLidx[0]],0))))', 'type': 'f'},
    })

# this overwrites the Vtype from post-processor!
;;;;
;FOR SYS
;;;;
[Sys]
# then, add Sys.all afterwards
#all = ['VHbbCommon.HiggsReco','VHbbCommon.EWKweights','VHbbCommon.BTagSFDeepCSV_18','Sys.newBranches', 'Sys.GetTopMass','VHbbCommon.DYspecialWeight','Sys.electronSF','Sys.muonSF','VHbbCommon.LOtoNLOweight','Sys.PUweight','VHbbCommon.JetPUIDSF','VHbbCommon.DoubleBtagSF','VHbbCommon.VReco']
#,'VHbbCommon.isBoosted','VHbbCommon.isBoostedVZ']

all = ['VHbbCommon.HiggsReco','VHbbCommon.EWKweights','VHbbCommon.BTagSF', 'Sys.GetTopMass','VHbbCommon.DYspecialWeight','Sys.electronSF','Sys.muonSF','VHbbCommon.LOtoNLOweight','VHbbCommon.JetPUIDSF','VHbbCommon.DoubleBtagSF','VHbbCommon.SampleGroup']
all2 = ['VHbbCommon.isBoosted','VHbbCommon.isBoostedVZ']
#all = ['VHbbCommon.SampleGroup','VHbbCommon.HiggsReco','VHbbCommon.FitCorr','VHbbCommon.EWKweights','VHbbCommon.BTagSFDeepCSV','VHbbCommon.DYspecialWeight','Sys.electronSFrun2','Sys.muonSF','VHbbCommon.LOtoNLOweight','VHbbCommon.JetPUIDSF','VHbbCommon.DoubleBtagSF']

electronSF = ElectronSFfromJSON.ElectronSFfromJSON(jsonFiles=['/work/krgedia/CMSSW_10_1_0/src/Xbb/python/data/Wlv/Electrons/IDs2018passingMVA94Xwp80iso.json','/work/krgedia/CMSSW_10_1_0/src/Xbb/python/data/Wlv/Electrons/Trig2018passingSingleEle.json', 'data/Wlv/Electrons/ScaleFactor_etracker_80x.json'], branchName='electronSF',channel='Wlv',year=2018)
muonSF = MuonSFfromJSON.MuonSFfromJSON(jsonFiles=['/work/krgedia/CMSSW_10_1_0/src/Xbb/python/data/Wlv/Muons/vhbb_SingleMuon_EfficienciesAndSF.json'], branchName='muonSF',channel='Wlv',year=2018)

PUweight = PUweight.PUweight(fileNameData='/work/krgedia/CMSSW_10_1_0/src/Xbb/python/data/pu/2018/PileupHistogram-goldenJSON-13tev-2018-69200ub-100bins.root',fileNameMC='/work/krgedia/CMSSW_10_1_0/src/Xbb/python/data/pu/2018/mc_pu.root',fileNameDataUp='/work/krgedia/CMSSW_10_1_0/src/Xbb/python/data/pu/2018/PileupHistogram-goldenJSON-13tev-2018-72400ub-100bins.root',fileNameDataDown='/work/krgedia/CMSSW_10_1_0/src/Xbb/python/data/pu/2018/PileupHistogram-goldenJSON-13tev-2018-66000ub-100bins.root',puWeightName='puWeight')

# new branches
newBranches = BranchTools.TreeFormulas({
    'Lepton_pt':  'Alt$((Vtype==2)*Muon_pt[vLidx[0]],0)   + Alt$((Vtype==3)*Electron_pt[vLidx[0]],0)',
    'Lepton_phi': 'Alt$((Vtype==2)*Muon_phi[vLidx[0]],0)  + Alt$((Vtype==3)*Electron_phi[vLidx[0]],0)',
    'Lepton_eta': 'Alt$((Vtype==2)*Muon_eta[vLidx[0]],0)  + Alt$((Vtype==3)*Electron_eta[vLidx[0]],0)',
    'hJets_pt_reg_max': 'max(Jet_PtReg[hJidx[0]],Jet_PtReg[hJidx[1]])',
    'hJets_pt_reg_min': 'min(Jet_PtReg[hJidx[0]],Jet_PtReg[hJidx[1]])',
    'nAddJet30': {'formula': 'Sum$(Jet_Pt>30&&abs(Jet_eta)<2.5&&Jet_puId>0&&Jet_lepFilter&&Iteration$!=hJidx[0] && Iteration$ != hJidx[1])', 'type': 'i'},
    'jjVPtRatio': 'H_pt/V_pt', 
    'nAddLep15_2p5':      {'formula':'Sum$(Muon_pt>15&&abs(Muon_eta)<2.5&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>15&&abs(Electron_eta)<2.5&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep20_2p5':      {'formula':'Sum$(Muon_pt>20&&abs(Muon_eta)<2.5&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>20&&abs(Electron_eta)<2.5&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep25_2p5':      {'formula':'Sum$(Muon_pt>25&&abs(Muon_eta)<2.5&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>25&&abs(Electron_eta)<2.5&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep15':          {'formula':'Sum$(Muon_pt>15&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>15&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep20':          {'formula':'Sum$(Muon_pt>20&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>20&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep25':          {'formula':'Sum$(Muon_pt>25&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>25&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddJets302p5_puid': {'formula':'Sum$(Jet_Pt>30&&abs(Jet_eta)<2.5&&(Jet_puId>6||Jet_Pt>50.0)&&Jet_lepFilter&&Iteration$!=hJidx[0]&&Iteration$!=hJidx[1])', 'type':'i'},
    'nAddJets252p5_puid': {'formula':'Sum$(Jet_Pt>25&&abs(Jet_eta)<2.5&&(Jet_puId>6||Jet_Pt>50.0)&&Jet_lepFilter&&Iteration$!=hJidx[0]&&Iteration$!=hJidx[1])', 'type':'i'},
    'MET_Significance30': '(MET_Pt/TMath::Sqrt(Sum$(Jet_Pt*(Jet_Pt>30&&(Jet_puId>6||Jet_Pt>50)&&Jet_jetId>4&&Jet_lepFilter))))',
    'htJet30': {'formula': 'Sum$(Jet_Pt*(Jet_Pt >30 && Jet_puId > 0 && Jet_lepFilter))', 'type': 'f'},
    'dPhiLepMet':   {'formula': 'abs(TVector2::Phi_mpi_pi(MET_Phi-(Alt$((Vtype==2)*Muon_phi[vLidx[0]],0) + Alt$((Vtype==3)*Electron_phi[vLidx[0]],0))))', 'type': 'f'},
    'dPhiLepMetv2': {'formula': 'abs(VHbb::deltaPhi(MET_Phi,(Alt$((Vtype==2)*Muon_phi[vLidx[0]],0) + Alt$((Vtype==3)*Electron_phi[vLidx[0]],0))))', 'type': 'f'},
    })

# additional reconstruction of variables for DNN input
GetTopMass = GetTopMass.GetTopMass(nano=True, propagateJES=True, METmethod=2, minbTag = 0.1241, branchName='top_mass2_05') 
GetWTMass = GetWTMass.GetWTMass(nano=True,branchName="V_mt")

[Eval]
weightAsBranch = WeightAsBranch.WeightAsBranch()

# DNNs
all   = <!Eval|VH!> + <!Eval|VV!> 
VH = ['Eval.SR_medhigh_Wln','Eval.Whf_med_Wln','Eval.Whf_high_Wln','Eval.VH_BDT_Wlv_BOOST']
VV = ['Eval.VV_SR_medhigh_Wln','Eval.VV_Whf_med_Wln','Eval.VV_Whf_high_Wln','Eval.VZ_BDT_Wlv_BOOST']

reBDT = ['Eval.VH_BDT_Wlv_BOOST','Eval.VZ_BDT_Wlv_BOOST','VHbbCommon.isBoosted','VHbbCommon.isBoostedVZ']
# signal/background
SR_medhigh_Wen = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='SR_medhigh_Wen',condition='hJidx[0]>-1&&hJidx[1]>-1')
SR_medhigh_Wmn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='SR_medhigh_Wmn',condition='hJidx[0]>-1&&hJidx[1]>-1')
SR_medhigh_Wln = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='SR_medhigh_Wln',condition='hJidx[0]>-1&&hJidx[1]>-1')

SR_med_Wen = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='SR_med_Wen',condition='hJidx[0]>-1&&hJidx[1]>-1')
SR_med_Wmn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='SR_med_Wmn',condition='hJidx[0]>-1&&hJidx[1]>-1')
SR_med_Wln = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='SR_med_Wln',condition='hJidx[0]>-1&&hJidx[1]>-1')

SR_high_Wen = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='SR_high_Wen',condition='hJidx[0]>-1&&hJidx[1]>-1')
SR_high_Wmn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='SR_high_Wmn',condition='hJidx[0]>-1&&hJidx[1]>-1')
SR_high_Wln = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='SR_high_Wln',condition='hJidx[0]>-1&&hJidx[1]>-1')

# HF CR background discriminator
Whf_medhigh_Wen = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Whf_medhigh_Wen',condition='hJidx[0]>-1&&hJidx[1]>-1')
Whf_medhigh_Wmn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Whf_medhigh_Wmn',condition='hJidx[0]>-1&&hJidx[1]>-1')
Whf_medhigh_Wln = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Whf_medhigh_Wln',condition='hJidx[0]>-1&&hJidx[1]>-1')

Whf_med_Wen = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Whf_med_Wen',condition='hJidx[0]>-1&&hJidx[1]>-1')
Whf_med_Wmn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Whf_med_Wmn',condition='hJidx[0]>-1&&hJidx[1]>-1')
Whf_med_Wln = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Whf_med_Wln',condition='hJidx[0]>-1&&hJidx[1]>-1')

Whf_high_Wen = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Whf_high_Wen',condition='hJidx[0]>-1&&hJidx[1]>-1')
Whf_high_Wmn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Whf_high_Wmn',condition='hJidx[0]>-1&&hJidx[1]>-1')
Whf_high_Wln = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Whf_high_Wln',condition='hJidx[0]>-1&&hJidx[1]>-1')

# diboson VZ
VV_SR_medhigh_Wen = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_SR_medhigh_Wen',condition='hJidx[0]>-1&&hJidx[1]>-1')
VV_SR_medhigh_Wmn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_SR_medhigh_Wmn',condition='hJidx[0]>-1&&hJidx[1]>-1')
VV_SR_medhigh_Wln = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_SR_medhigh_Wln',condition='hJidx[0]>-1&&hJidx[1]>-1')

# VV HF CR background discriminator
VV_Whf_medhigh_Wen = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_Whf_medhigh_Wen',condition='hJidx[0]>-1&&hJidx[1]>-1')
VV_Whf_medhigh_Wmn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_Whf_medhigh_Wmn',condition='hJidx[0]>-1&&hJidx[1]>-1')
VV_Whf_medhigh_Wln = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_Whf_medhigh_Wln',condition='hJidx[0]>-1&&hJidx[1]>-1')

VV_Whf_med_Wen = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_Whf_med_Wen',condition='hJidx[0]>-1&&hJidx[1]>-1')
VV_Whf_med_Wmn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_Whf_med_Wmn',condition='hJidx[0]>-1&&hJidx[1]>-1')
VV_Whf_med_Wln = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_Whf_med_Wln',condition='hJidx[0]>-1&&hJidx[1]>-1')

VV_Whf_high_Wen = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_Whf_high_Wen',condition='hJidx[0]>-1&&hJidx[1]>-1')
VV_Whf_high_Wmn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_Whf_high_Wmn',condition='hJidx[0]>-1&&hJidx[1]>-1')
VV_Whf_high_Wln = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_Whf_high_Wln',condition='hJidx[0]>-1&&hJidx[1]>-1')

# mjj analysis
mjj                = ['Eval.Mjj_SR_medhigh_Wmn', 'Eval.Mjj_SR_medhigh_Wen']
Mjj_SR_medhigh_Wmn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Mjj_SR_medhigh_Wmn')
Mjj_SR_medhigh_Wen = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Mjj_SR_medhigh_Wen')

# multi
#multiDNN = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Multi_medhigh_Wln')
multiDNN = ['Eval.multiDNNmu', 'Eval.multiDNNe']
multiDNNmu = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Multi_medhigh_Wmn')
multiDNNe = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Multi_medhigh_Wen')

#BDT
#BDT_Wlv_BOOSTFinal_wdB = tmvaEvaluator.tmvaEvaluator(mvaName='Wlv_high_BOOST_BDT',condition='Hbb_fjidx>-1')    
#VV_BDT_Wlv_BOOSTFinal_wdB = tmvaEvaluator.tmvaEvaluator(mvaName='VZ_Wlv_high_BOOST_BDT',condition='Hbb_fjidx>-1')    

VH_BDT_Wlv_BOOST = tmvaEvaluator.tmvaEvaluator(mvaName='BDT_Wlv_BOOSTFinal_wdB_withFullResolvedFeatures_2018_fix',condition='Hbb_fjidx>-1')    
VZ_BDT_Wlv_BOOST = tmvaEvaluator.tmvaEvaluator(mvaName='BDT_VZ_Wlv_BOOSTFinal_wdB_2018',condition='Hbb_fjidx>-1')    

VH_BDT_branchName = BDT_Wlv_BOOSTFinal_wdB_withFullResolvedFeatures_2018_fix
VZ_BDT_branchName = BDT_VZ_Wlv_BOOSTFinal_wdB_2018


#Need this for the plotting
[VHbbNameSpace]
library=<!Directories|vhbbpath!>/interface/VHbbNameSpace_h.so


; _ _ _ _ _ _ _ _ _
;* * * * * * * * * *|
;  SYSTEMATICS  |
;_*_*_*_*_*_*_*_*_*_|

#[systematics]

#systematics = Nominal jer_Up jer_Down jerReg_Up jerReg_Down jesAbsoluteStat_Up jesAbsoluteStat_Down jesAbsoluteScale_Up jesAbsoluteScale_Down jesAbsoluteFlavMap_Up jesAbsoluteFlavMap_Down jesAbsoluteMPFBias_Up jesAbsoluteMPFBias_Down jesFragmentation_Up jesFragmentation_Down jesSinglePionECAL_Up jesSinglePionECAL_Down jesSinglePionHCAL_Up jesSinglePionHCAL_Down jesFlavorQCD_Up jesFlavorQCD_Down jesRelativeJEREC1_Up jesRelativeJEREC1_Down jesRelativeJEREC2_Up jesRelativeJEREC2_Down jesRelativeJERHF_Up jesRelativeJERHF_Down jesRelativePtBB_Up jesRelativePtBB_Down jesRelativePtEC1_Up jesRelativePtEC1_Down jesRelativePtEC2_Up jesRelativePtEC2_Down jesRelativePtHF_Up jesRelativePtHF_Down jesRelativeBal_Up jesRelativeBal_Down jesRelativeFSR_Up jesRelativeFSR_Down jesRelativeStatFSR_Up jesRelativeStatFSR_Down jesRelativeStatEC_Up jesRelativeStatEC_Down jesRelativeStatHF_Up jesRelativeStatHF_Down jesPileUpDataMC_Up jesPileUpDataMC_Down jesPileUpPtRef_Up jesPileUpPtRef_Down jesPileUpPtBB_Up jesPileUpPtBB_Down jesPileUpPtEC1_Up jesPileUpPtEC1_Down jesPileUpPtEC2_Up jesPileUpPtEC2_Down jesPileUpPtHF_Up jesPileUpPtHF_Down jesPileUpMuZero_Up jesPileUpMuZero_Down jesPileUpEnvelope_Up jesPileUpEnvelope_Down jesTotal_Up jesTotal_Down jms_Up jms_Down jmr_Up jmr_Down

#jms, jmr are boosted-specific

[Weights]

#----- Nominal -----#

puWeight         = (puWeight)
genWeight        = (genWeight)

muonWeight       = (isWenu + isWmunu*muonSF[0])
electronWeight   = (isWmunu + isWenu*electronSF[0])
leptonWeight     = (<!Weights|muonWeight!>*<!Weights|electronWeight!>)
#bTagWeight       = (1.0+<!General|DeepCSVweightApplies!>*(-1.0+bTagWeightDeepCSV))
bTagWeight       = (1.0+<!General|resolvedBtagWeightApplies!>*(-1.0+bTagWeight<!General|btagMethod!>))
EWKweight        = EWKw[0]
doubleBtagWeight = (1.0+<!General|DeepAK8weightApplies!>*(-1.0+bTagWeightDoubleB))
#(1.0+(Hbb_fjidx>-1)*(-1.0+bTagWeightDoubleB))
fitCorr          = FitCorr[0]

; use the per sample defined special weight from config
;When True, uses special weight from samples_nosplit.ini, otherwise brom branch DY_specialWeight
useSpecialWeight = True
;useSpecialWeight = False

# set the stitching weight accordingly 
stitchingWeights_False  = DY_specialWeight
stitchingWeights_True   = 1.0
stitchingWeights        = (<!Weights|stitchingWeights_<!.|useSpecialWeight!>!>)

#weightNLO        = weightLOtoNLO_2016
weightNLO         = (weightLOtoNLO_LHEVptV5)

additionalCorrection = 1.0 

weightJetPUID    = (weightJetPUID)
weightNaddJetsResidual = (1.02404-0.0175717*Sum$(Jet_Pt>30&&abs(Jet_eta)<2.5&&(Jet_puId>6||Jet_Pt>50.0)&&Jet_lepFilter&&Iteration$!=hJidx[0]&&Iteration$!=hJidx[1]))

#MET_phi_data_cut        = ( (isWmunu) || ((isWenu)*(1-(1-0.34482)*((Electron_phi[vLidx[0]] < -0.75 && Electron_phi[vLidx[0]] > -2.0) &&  Electron_eta[vLidx[0]] < -1.5))))
MET_phi_data_cut        = ((isWmunu) + (isWenu)*Alt$((1 - (1.0-0.34482)*((Electron_phi[vLidx[0]] < -0.75 && Electron_phi[vLidx[0]] > -2.0)&&Electron_eta[vLidx[0]]<-1.5)),0))
#MET_Phi_cut = ((isData && isWenu && (run<319077 || ((Electron_phi[vLidx[0]]<-2.0 || Electron_phi[vLidx[0]]>-0.75) && (Electron_eta[vLidx[0]]>-1.5)))) || (isData != 1) || (isWmunu)) 

weightF     = <!Weights|genWeight!>*<!Weights|puWeight!>*<!Weights|leptonWeight!>*<!Weights|bTagWeight!>*<!Weights|EWKweight!>*<!Weights|weightNLO!>*<!Weights|stitchingWeights!>*<!Weights|additionalCorrection!>*<!Weights|weightJetPUID!>*<!Weights|MET_phi_data_cut!>*<!Weights|doubleBtagWeight!> 

#----- partial weights -----#
;
#weight_noBTag    = <!Weights|genWeight!>*<!Weights|puWeight!>*<!Weights|leptonWeight!>*<!Weights|EWKweight!>*<!Weights|weightNLO!>*<!Weights|stitchingWeights!> * <!Weights|additionalCorrection!>*<!Weights|weightJetPUID!>*<!Weights|MET_phi_data_cut!> 
weight_noBTag    = (<!.|weightF!>)/(<!Weights|bTagWeight!>)
weight_noPU      = <!Weights|genWeight!>*<!Weights|leptonWeight!>*<!Weights|bTagWeight!>*<!Weights|EWKweight!>*<!Weights|weightNLO!>*<!Weights|stitchingWeights!>*<!Weights|additionalCorrection!>*<!Weights|weightJetPUID!>*<!Weights|MET_phi_data_cut!>*<!Weights|doubleBtagWeight!>
weight_noLepSF   = (<!.|weightF!>)/(<!Weights|leptonWeight!>) 
weight_noEWK     = (<!.|weightF!>)/(<!Weights|EWKweight!>)
weight_noNLO     = (<!.|weightF!>)/(<!Weights|weightNLO!>) 
#weight_noPU      = <!Weights|genWeight!>*<!Weights|leptonWeight!>*<!Weights|bTagWeight!>*<!Weights|EWKweight!>*<!Weights|weightNLO!>*<!Weights|stitchingWeights!> * <!Weights|additionalCorrection!>*<!Weights|doubleBtagWeight!>*<!Weights|weightJetPUID!>*<!Weights|doubleBtagWeight!>*<!Weights|MET_phi_data_cut!> 
#weight_noLepSF   = <!Weights|genWeight!>*<!Weights|puWeight!>*<!Weights|bTagWeight!>*<!Weights|EWKweight!>*<!Weights|weightNLO!>*<!Weights|stitchingWeights!> * <!Weights|additionalCorrection!>*<!Weights|doubleBtagWeight!>*<!Weights|weightJetPUID!>*<!Weights|doubleBtagWeight!>*<!Weights|MET_phi_data_cut!> 
#weight_noEWK     = <!Weights|genWeight!>*<!Weights|puWeight!>*<!Weights|leptonWeight!>*<!Weights|bTagWeight!>*<!Weights|weightNLO!>*<!Weights|stitchingWeights!> * <!Weights|additionalCorrection!>*<!Weights|doubleBtagWeight!>*<!Weights|weightJetPUID!>*<!Weights|doubleBtagWeight!>*<!Weights|MET_phi_data_cut!> 
#weight_noFitCorr = <!Weights|genWeight!>*<!Weights|puWeight!>*<!Weights|leptonWeight!>*<!Weights|bTagWeight!>*<!Weights|EWKweight!>*<!Weights|weightNLO!>*<!Weights|stitchingWeights!> * <!Weights|additionalCorrection!>*<!Weights|doubleBtagWeight!>*<!Weights|weightJetPUID!>*<!Weights|doubleBtagWeight!>*<!Weights|MET_phi_data_cut!>
#weight_noNLO     = <!Weights|genWeight!>*<!Weights|puWeight!>*<!Weights|leptonWeight!>*<!Weights|bTagWeight!>*<!Weights|EWKweight!>*<!Weights|stitchingWeights!> * <!Weights|additionalCorrection!>*<!Weights|doubleBtagWeight!>*<!Weights|weightJetPUID!>*<!Weights|doubleBtagWeight!>*<!Weights|MET_phi_data_cut!> 

; _ _ _ _ _ _ _ _ _
;* * * * * * * * * *|
;  Weight sys       |
;_*_*_*_*_*_*_*_*_*_|


CMS_vhbb_ttbar_nAddJets_UP   = <!Weights|weightF!>*(1.1-0.0383*Sum$(Jet_Pt>30&&abs(Jet_eta)<2.5&&(Jet_puId>6||Jet_Pt>50.0)&&Jet_lepFilter&&Iteration$!=hJidx[0]&&Iteration$!=hJidx[1]))
CMS_vhbb_ttbar_nAddJets_DOWN = <!Weights|weightF!>/(1.1-0.0383*Sum$(Jet_Pt>30&&abs(Jet_eta)<2.5&&(Jet_puId>6||Jet_Pt>50.0)&&Jet_lepFilter&&Iteration$!=hJidx[0]&&Iteration$!=hJidx[1]))


CMS_vhbb_jetPUID_UP   = <!Weights|weightF!>/<!Weights|weightJetPUID!>*weightJetPUID_Up
CMS_vhbb_jetPUID_DOWN = <!Weights|weightF!>/<!Weights|weightJetPUID!>*weightJetPUID_Down


#----- Electron SF -----#
CMS_vhbb_eff_e_Wln_13TeV_DOWN: <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF[1]
CMS_vhbb_eff_e_Wln_13TeV_UP: <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF[2]

CMS_vhbb_eff_e_trigger_Wlv_13TeV_DOWN:    <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF_IdIso[0]*electronSF_trigger[1]
CMS_vhbb_eff_e_MVAID_Wlv_13TeV_DOWN:      <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF_IdIso[1]*electronSF_trigger[0]
CMS_vhbb_eff_e_MVAID_Wlv_eta0_13TeV_DOWN: <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF_IdIso_B[0]*electronSF_trigger[0]
CMS_vhbb_eff_e_MVAID_Wlv_eta1_13TeV_DOWN: <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF_IdIso_E[0]*electronSF_trigger[0]

CMS_vhbb_eff_e_trigger_Wlv_13TeV_UP:    <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF_IdIso[0]*electronSF_trigger[2]
CMS_vhbb_eff_e_MVAID_Wlv_13TeV_UP:      <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF_IdIso[2]*electronSF_trigger[0]
CMS_vhbb_eff_e_MVAID_Wlv_eta0_13TeV_UP: <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF_IdIso_B[1]*electronSF_trigger[0]
CMS_vhbb_eff_e_MVAID_Wlv_eta1_13TeV_UP: <!Weights|weight_noLepSF!>*<!Weights|muonWeight!>*electronSF_IdIso_E[1]*electronSF_trigger[0]

#----- Muon SF ----#
CMS_vhbb_eff_m_Wln_13TeV_DOWN: <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF[1]
CMS_vhbb_eff_m_Wln_13TeV_UP: <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF[2]

CMS_vhbb_eff_m_trigger_Wlv_13TeV_DOWN: <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[0]*muonSF_Id[0]*muonSF_trigger[1]
CMS_vhbb_eff_m_ISO_Wlv_13TeV_DOWN:     <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[1]*muonSF_Id[0]*muonSF_trigger[0]
CMS_vhbb_eff_m_MVAID_Wlv_13TeV_DOWN:   <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[0]*muonSF_Id[1]*muonSF_trigger[0]

CMS_vhbb_eff_m_trigger_Wlv_13TeV_UP: <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[0]*muonSF_Id[0]*muonSF_trigger[2]
CMS_vhbb_eff_m_ISO_Wlv_13TeV_UP:     <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[2]*muonSF_Id[0]*muonSF_trigger[0]
CMS_vhbb_eff_m_MVAID_Wlv_13TeV_UP:   <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[0]*muonSF_Id[2]*muonSF_trigger[0]

[Branches]
;branch that should always be kept in the Nutples
keep_branches = ['is*', 'run', 'event', 'luminosityBlock', 'sampleIndex', 'genWeight', 'puWeight*', 'V_*','EWKwVJets', 'LHE_Njets', 'LHE_HT', 'LHE_Nb', 'LHE_Vpt', 'LHE_Nuds', 'LHE_Nc', 'Vtype', 'HLT_Mu17_TrkIsoVVL_Mu8_TrkIsoVVL_DZ_Mass*', 'HLT_Ele23_Ele12_CaloIdL_TrackIdL_Iso*', 'GenJet_pt', 'GenJet_eta', 'GenJet_hadronFlavour', 'genWeight','electronSF','muonSF','bTagWeightDeepCSV*','Pileup_nTrueInt', 'fixedGridRhoFastjetAll', 'is_*', 'nGenStatus2bHad','GenPart*','DY_specialWeight','weightLO*','*DNN*','LHEScaleWeight', 'weight', 'weightF', 'weightXS', 'Jet_Pt', 'Jet_PtReg', 'Jet_eta', 'Jet_phi', 'Jet_btag*', 'hJidx', 'FatJet_m*']

keep_branches_plot = ['MET_pt','MET_Pt','MET_phi','Jet_Pt*','Jet_PtReg*','Jet_phi','Jet_eta','Jet_jetId*','H_phi','H_eta','nGenStatus2bHad','LHE_Vpt','LHE_HT','LHE_Nb','DY_specialWeight']

