#! ------------------------
#!! GENERAL CONFIGURATION
#!! -------------------------

[General]
#Set to True or False to display debug messages
Debug: True

MVAtype = DNN

electronMVA80 = Electron_mvaFall17V1Iso_WP80 
electronMVA90 = Electron_mvaFall17V1Iso_WP90
electronMVA = <!General|electronMVA80!>

[Configuration]
usePythonXrootD      = True
outputTreeBasketSize = 8000
haddTargetNumEvents  = 16000
files_per_job        = 50
channel              = Wlv
TreeCopierPSI        = True
nprocesses           = 0
run_locally          = False

# NanoAOD format
treeName = Events
#countTreeName = genEventSumw
AllowDuplicateTrees = True
countsFromAutoPU = False

[SubmitOptions]
submitScriptSpecialOptions = {'sysnew': ' -l h_vmem=6g '}

[Analysis]

tag  = 13TeV

# BDT to discriminate Signal and Background
#!! If this Flag is used then 50% of MC samples will go in training and the rest will be scaled up by a factor of 2.
#!! if you train on 50% but then set it to 'False' while writing DC, then you get your biased training samples in the limit!!!
#!! be sure to have this right !!!
;#When computing SF from CR, set this flag to false
;if one wants to use Mjj -> put to False
;Rescale MC by factor 2 if true
TrainFlag = True

;Current BDT FOM: Cls of train/vs CLs of test sample. To produce the DC on train sample, set this flag to True.
;!!!IMPORTANT: BE SURE TO HAVE "UseTrainSample = False" WHEN COMPUTING THE FINAL LIMIT !!!
UseTrainSample = False

;ALWAYS set to False, unless training to produce correlation plots
Data_as_signal = False


[Prep]
Step1           = ['VHbbCommon.Clean','VHbbCommon.JetSmearer','VHbbCommon.JECcorrelator','Prep.LeptonSelection']
LeptonSelection = VHbbSelection.VHbbSelection(year="2016", channels=["Wln"], idWmn=None, idWen=None, skipJetSelection=True, vpt0lep=130.0, vpt1lep=110.0, vpt2lep=75.0, jetIdCut=2)

Step2           = ['VHbbCommon.METXY','Prep.Selection', 'VHbbCommon.isData','VHbbCommon.isSignal','VHbbCommon.isWH','VHbbCommon.HeppyStyleGen','VHbbCommon.genBstatus','Prep.newBranches','VHbbCommon.VReco']

Selection = VHbbSelection.VHbbSelection(year="2016", channels=["Wln"], idWmn=None, idWen=None, jetIdCut=2)

newBranches = BranchTools.TreeFormulas({
    'Lepton_pt':  'Alt$((Vtype==2)*Muon_pt[vLidx[0]],0)   + Alt$((Vtype==3)*Electron_pt[vLidx[0]],0)',
    'Lepton_phi': 'Alt$((Vtype==2)*Muon_phi[vLidx[0]],0)  + Alt$((Vtype==3)*Electron_phi[vLidx[0]],0)',
    'Lepton_eta': 'Alt$((Vtype==2)*Muon_eta[vLidx[0]],0)  + Alt$((Vtype==3)*Electron_eta[vLidx[0]],0)',
    'nAddLep15_2p5':      {'formula':'Sum$(Muon_pt>15&&abs(Muon_eta)<2.5&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>15&&abs(Electron_eta)<2.5&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep20_2p5':      {'formula':'Sum$(Muon_pt>20&&abs(Muon_eta)<2.5&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>20&&abs(Electron_eta)<2.5&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep25_2p5':      {'formula':'Sum$(Muon_pt>25&&abs(Muon_eta)<2.5&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>25&&abs(Electron_eta)<2.5&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep15':          {'formula':'Sum$(Muon_pt>15&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>15&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep20':          {'formula':'Sum$(Muon_pt>20&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>20&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep25':          {'formula':'Sum$(Muon_pt>25&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>25&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'htJet30': {'formula': 'Sum$(Jet_Pt*(Jet_Pt >30 && Jet_puId > 0 && Jet_lepFilter))', 'type': 'f'},
    'dPhiLepMet':   {'formula': 'abs(TVector2::Phi_mpi_pi(MET_Phi-(Alt$((Vtype==2)*Muon_phi[vLidx[0]],0) + Alt$((Vtype==3)*Electron_phi[vLidx[0]],0))))', 'type': 'f'},
    'dPhiLepMetv2': {'formula': 'abs(VHbb::deltaPhi(MET_Phi,(Alt$((Vtype==2)*Muon_phi[vLidx[0]],0) + Alt$((Vtype==3)*Electron_phi[vLidx[0]],0))))', 'type': 'f'},
    })


;;;;
;FOR SYS
;;;;
[Sys]
# then, add Sys.all afterwards
#all = ['VHbbCommon.HiggsReco','VHbbCommon.FitCorr','VHbbCommon.EWKweights','VHbbCommon.BTagSFDeepCSV','Sys.newBranches','VHbbCommon.DYspecialWeight','Sys.electronSFrun2','Sys.muonSF','VHbbCommon.LOtoNLOweight','VHbbCommon.JetPUIDSF','VHbbCommon.DoubleBtagSF']
all = ['VHbbCommon.SampleGroup','VHbbCommon.HiggsReco','VHbbCommon.FitCorr','VHbbCommon.EWKweights','VHbbCommon.BTagSFDeepCSV','VHbbCommon.DYspecialWeight','Sys.electronSFrun2','Sys.muonSF','VHbbCommon.LOtoNLOweight','VHbbCommon.JetPUIDSF','VHbbCommon.DoubleBtagSF','Sys.GetTopMass']

fix = ['VHbbCommon.HiggsReco','Sys.GetTopMass']

boostedFlags = ['VHbbCommon.isBoosted','VHbbCommon.isBoostedVZ']

#electronSF = ElectronSFfromJSON.ElectronSFfromJSON(jsonFiles=['data/Wlv/Electrons/VHbb1ElectronIDISO2017.json','data/Wlv/Electrons/VHbb1ElectronTrigger2017.json', 'data/Wlv/Electrons/ScaleFactor_etracker_80x.json'], branchName='electronSF',channel='Wlv')
electronSFrun2 = ElectronSFfromJSON.ElectronSFfromJSON(jsonFiles=['data/Run2ElectronSF/Trig2016passingSingleEle.json', 'data/Run2ElectronSF/IDs2016passingMVA94Xwp80iso.json',  'data/Wlv/Electrons/ScaleFactor_etracker_80x.json'], branchName='electronSF',channel='Wlv')
muonSF = MuonSFfromJSON.MuonSFfromJSON(jsonFiles=['data/Run2MuonSF/MuID_BCDEF_2016.json', 'data/Run2MuonSF/MuID_GH_2016.json', 'data/Run2MuonSF/MuIso_BCDEF_2016.json', 'data/Run2MuonSF/MuIso_GH_2016.json', 'data/Run2MuonSF/MuTrigger_BCDEF_2016.json', 'data/Run2MuonSF/MuTrigger_GH_2016.json'], branchName='muonSF',channel='Wlv', year=2016)

# new branches
newBranches = BranchTools.TreeFormulas({
    'Lepton_pt':  'Alt$((Vtype==2)*Muon_pt[vLidx[0]],0)   + Alt$((Vtype==3)*Electron_pt[vLidx[0]],0)',
    'Lepton_phi': 'Alt$((Vtype==2)*Muon_phi[vLidx[0]],0)  + Alt$((Vtype==3)*Electron_phi[vLidx[0]],0)',
    'Lepton_eta': 'Alt$((Vtype==2)*Muon_eta[vLidx[0]],0)  + Alt$((Vtype==3)*Electron_eta[vLidx[0]],0)',
    'jjVPtRatio': 'H_pt/V_pt', 
    'nAddLep15_2p5':      {'formula':'Sum$(Muon_pt>15&&abs(Muon_eta)<2.5&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>15&&abs(Electron_eta)<2.5&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep20_2p5':      {'formula':'Sum$(Muon_pt>20&&abs(Muon_eta)<2.5&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>20&&abs(Electron_eta)<2.5&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep25_2p5':      {'formula':'Sum$(Muon_pt>25&&abs(Muon_eta)<2.5&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>25&&abs(Electron_eta)<2.5&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep15':          {'formula':'Sum$(Muon_pt>15&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>15&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep20':          {'formula':'Sum$(Muon_pt>20&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>20&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'nAddLep25':          {'formula':'Sum$(Muon_pt>25&&Muon_pfRelIso04_all<0.1&&((Vtype==3)||(Iteration$!=(vLidx[0]))))+Sum$(Electron_pt>25&&Electron_pfRelIso03_all<0.1&&((Vtype==2)||(Iteration$!=(vLidx[0]))))', 'type':'i'},
    'dPhiLepMet':   {'formula': 'abs(TVector2::Phi_mpi_pi(MET_phi-(Alt$((Vtype==2)*Muon_phi[vLidx[0]],0) + Alt$((Vtype==3)*Electron_phi[vLidx[0]],0))))', 'type': 'f'},
    'dPhiLepMetv2': {'formula': 'abs(VHbb::deltaPhi(MET_phi,(Alt$((Vtype==2)*Muon_phi[vLidx[0]],0) + Alt$((Vtype==3)*Electron_phi[vLidx[0]],0))))', 'type': 'f'},
    })

# additional reconstruction of variables for DNN input
GetTopMass = GetTopMass.GetTopMass(nano=True, propagateJES=True, METmethod=2, minbTag=<!General|btagWP_Loose!>, branchName='top_mass2_05', puIdCut=6, jetIdCut=2)
GetTopMassNominal = GetTopMass.GetTopMass(nano=True, propagateJES=False, METmethod=2, minbTag=<!General|btagWP_Loose!>, branchName='top_mass2_05')
GetWTMass = GetWTMass.GetWTMass(nano=True,branchName="V_mt")

[Eval]
# DNNs
all   = <!Eval|VH!> + <!Eval|VV!> + <!Eval|BDT!>
VH = ['Eval.SR_medhigh_Wln','Eval.Whf_med_Wln','Eval.Whf_high_Wln']
VV = ['Eval.VV_SR_medhigh_Wln','Eval.VV_Whf_med_Wln', 'Eval.VV_Whf_high_Wln']
BDT = ['Eval.BDT_Wlv_BOOSTFinal_wdB', 'Eval.BDT_VZ_Wlv_BOOSTFinal_wdB']


VHLegacyDNNs   = ['Eval.SR_medhigh_Wln','Eval.Whf_high_Wln','Eval.Whf_med_Wln']
SR_medhigh_Wln = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='SR_medhigh_Wln',condition='hJidx[0]>-1&&hJidx[1]>-1')
Whf_high_Wln   = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Whf_high_Wln',condition='hJidx[0]>-1&&hJidx[1]>-1')
Whf_med_Wln    = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Whf_med_Wln',condition='hJidx[0]>-1&&hJidx[1]>-1')

BDT_Wlv_BOOSTFinal_wdB = tmvaEvaluator.tmvaEvaluator(mvaName='BDT_Wlv_BOOSTFinal_wdB_2016',condition='Hbb_fjidx>-1')
BDT_VZ_Wlv_BOOSTFinal_wdB = tmvaEvaluator.tmvaEvaluator(mvaName='BDT_VZ_Wlv_BOOSTFinal_wdB_2016',condition='Hbb_fjidx>-1')

# signal/background
SR_medhigh_Wen = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='SR_medhigh_Wen')
SR_medhigh_Wmn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='SR_medhigh_Wmn')

# HF CR background discriminator
Whf_medhigh_Wen = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Whf_medhigh_Wen')
Whf_medhigh_Wmn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Whf_medhigh_Wmn')
Whf_medhigh_Wln = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Whf_medhigh_Wln')

# diboson VZ
VV_SR_medhigh_Wen = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_SR_medhigh_Wen')
VV_SR_medhigh_Wmn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_SR_medhigh_Wmn')
VV_SR_medhigh_Wln = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_SR_medhigh_Wln',condition='hJidx[0]>-1&&hJidx[1]>-1')

# VV HF CR background discriminator
VV_Whf_medhigh_Wen = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_Whf_medhigh_Wen')
VV_Whf_medhigh_Wmn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_Whf_medhigh_Wmn')
VV_Whf_medhigh_Wln = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_Whf_medhigh_Wln')
VV_Whf_med_Wln = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_Whf_med_Wln',condition='hJidx[0]>-1&&hJidx[1]>-1')
VV_Whf_high_Wln = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='VV_Whf_high_Wln',condition='hJidx[0]>-1&&hJidx[1]>-1')

# mjj analysis
mjj                = ['Eval.Mjj_SR_medhigh_Wmn', 'Eval.Mjj_SR_medhigh_Wen']
Mjj_SR_medhigh_Wmn = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Mjj_SR_medhigh_Wmn')
Mjj_SR_medhigh_Wen = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Mjj_SR_medhigh_Wen')

# multi
#multiDNN = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Multi_medhigh_Wln')
multiDNN = ['Eval.multiDNNmu', 'Eval.multiDNNe']
multiDNNmu = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Multi_medhigh_Wmn')
multiDNNe = tensorflowEvaluator_fromCheckpoint.tensorflowEvaluator(mvaName='Multi_medhigh_Wen')

#Need this for the plotting
[VHbbNameSpace]
library=<!Directories|vhbbpath!>/interface/VHbbNameSpace_h.so

[Weights]

#----- Nominal -----#

puWeight         = puWeight
genWeight        = genWeight

muonWeight       = muonSF[0]
electronWeight   = electronSF[0]
leptonWeight     = <!Weights|muonWeight!>*<!Weights|electronWeight!>

doubleBtagWeight = (1.0+<!General|DeepAK8weightApplies!>*(-1.0+bTagWeightDoubleB))
#bTagWeight       = (1.0+<!General|DeepCSVweightApplies!>*(-1.0+bTagWeightDeepJet))
bTagWeight       = (1.0+<!General|DeepCSVweightApplies!>*(-1.0+bTagWeightDeepCSV))
EWKweight        = EWKw[0]

#fitCorr          = FitCorr[0]
#fitCorr          = (1.0 + (sampleIndex>200&&sampleIndex<205) * (-1.0 + FitCorr[0]))
fitCorr          = 1.0

; use the per sample defined special weight from config
;When True, uses special weight from samples_nosplit.ini, otherwise brom branch DY_specialWeight
useSpecialWeight = True
;useSpecialWeight = False

# set the stitching weight accordingly 
stitchingWeights_False  = DY_specialWeight
stitchingWeights_True   = 1.0
stitchingWeights        = <!Weights|stitchingWeights_<!.|useSpecialWeight!>!>

#weightNLO        = weightLOtoNLO
weightNLO        = weightLOtoNLO_2016
#weightNLO         = weightLOtoNLO_LHEVptV2
#weightNLO         = weightLOtoNLO_LHEVptV2b

weightJetPUID    = weightJetPUID
#weightNaddJetsResidual = (1.02404-0.0175717*Sum$(Jet_Pt>30&&abs(Jet_eta)<2.5&&(Jet_puId>6||Jet_Pt>50.0)&&Jet_lepFilter&&Iteration$!=hJidx[0]&&Iteration$!=hJidx[1]))
weightNaddJetsResidual = 1.0 

PrefireWeight    = PrefireWeight
#PrefireWeight    = 1.0

additionalCorrection = 1.0 

weightF     = <!Weights|genWeight!>*<!Weights|puWeight!>*<!Weights|leptonWeight!>*<!Weights|bTagWeight!>*<!Weights|EWKweight!>*<!Weights|fitCorr!>*<!Weights|weightNLO!>*<!Weights|stitchingWeights!> * <!Weights|additionalCorrection!> * <!Weights|weightJetPUID!> * <!Weights|weightNaddJetsResidual!> * <!Weights|PrefireWeight!> 

#----- partial weights -----#

weight_noBTag    = <!.|weightF!>/(<!Weights|bTagWeight!>)
weight_noLepSF   = <!.|weightF!>/(<!Weights|leptonWeight!>)
weight_noEWK     = <!.|weightF!>/(<!Weights|EWKweight!>)
weight_noNLO     = <!.|weightF!>/(<!Weights|weightNLO!>)
;
;# can be 0
weight_noPU      = <!Weights|genWeight!>*<!Weights|leptonWeight!>*<!Weights|bTagWeight!>*<!Weights|EWKweight!>*<!Weights|fitCorr!>*<!Weights|weightNLO!>*<!Weights|stitchingWeights!> * <!Weights|additionalCorrection!> * <!Weights|weightJetPUID!> * <!Weights|weightNaddJetsResidual!> * <!Weights|PrefireWeight!> * <!Weights|doubleBtagWeight!>
;

; _ _ _ _ _ _ _ _ _
;* * * * * * * * * *|
;  Weight sys  |
;_*_*_*_*_*_*_*_*_*_|


CMS_vhbb_ttbar_nAddJets_UP   = <!Weights|weightF!>*<!Weights|weightNaddJetsResidual!>
CMS_vhbb_ttbar_nAddJets_DOWN = <!Weights|weightF!>/<!Weights|weightNaddJetsResidual!>

CMS_vhbb_jetPUID_UP   = <!Weights|weightF!>/<!Weights|weightJetPUID!>*weightJetPUID_Up
CMS_vhbb_jetPUID_DOWN = <!Weights|weightF!>/<!Weights|weightJetPUID!>*weightJetPUID_Down

CMS_vhbb_VptNLO_UP    = <!Weights|weightF!>/<!Weights|weightNLO!>*weightLOtoNLO_LHEVptV2_Up
CMS_vhbb_VptNLO_DOWN  = <!Weights|weightF!>/<!Weights|weightNLO!>*weightLOtoNLO_LHEVptV2_Down

CMS_vhbb_vjetnlovptrw_p0_13TeV_UP   = <!Weights|weightF!>/<!Weights|weightNLO!>*weightLOtoNLO_LHEVptV2_p0_Up
CMS_vhbb_vjetnlovptrw_p0_13TeV_DOWN = <!Weights|weightF!>/<!Weights|weightNLO!>*weightLOtoNLO_LHEVptV2_p0_Down
CMS_vhbb_vjetnlovptrw_p1_13TeV_UP   = <!Weights|weightF!>/<!Weights|weightNLO!>*weightLOtoNLO_LHEVptV2_p1_Up
CMS_vhbb_vjetnlovptrw_p1_13TeV_DOWN = <!Weights|weightF!>/<!Weights|weightNLO!>*weightLOtoNLO_LHEVptV2_p1_Down

# TODO: rename in CH area, use old NLO weight for now:
CMS_vhbb_vjetnlodetajjrw_13TeV_UP:   <!Weights|CMS_vhbb_VptNLO_UP!>  
CMS_vhbb_vjetnlodetajjrw_13TeV_DOWN: <!Weights|CMS_vhbb_VptNLO_DOWN!>

# TODO: remove fit corr uncertainty
CMS_vhbb_topptreweighting_13TeV_DOWN: <!Weights|weightF!>
CMS_vhbb_topptreweighting_13TeV_UP:   <!Weights|weightF!> 
FitCorrection_DOWN:                   <!Weights|weightF!> 
FitCorrection_UP:                     <!Weights|weightF!>
FitCorrectionHF_DOWN:                 <!Weights|weightF!>
FitCorrectionHF_UP:                   <!Weights|weightF!>

# prefire correction
CMS_vhbb_PrefireWeight_13TeV_UP   = <!Weights|weightF!>/<!Weights|PrefireWeight!>*PrefireWeight_Up
CMS_vhbb_PrefireWeight_13TeV_DOWN = <!Weights|weightF!>/<!Weights|PrefireWeight!>*PrefireWeight_Down

#----- Electron SF -----#
CMS_vhbb_eff_e_trigger_Wlv_13TeV_DOWN:   <!Weights|weightF!>/electronSF_trigger[0]*electronSF_trigger[1]
CMS_vhbb_eff_e_MVAID_Wlv_13TeV_DOWN:     <!Weights|weightF!>/electronSF_IdIso[0]*electronSF_IdIso[1]

CMS_vhbb_eff_e_trigger_Wlv_13TeV_UP:   <!Weights|weightF!>/electronSF_trigger[0]*electronSF_trigger[2]
CMS_vhbb_eff_e_MVAID_Wlv_13TeV_UP:     <!Weights|weightF!>/electronSF_IdIso[0]*electronSF_IdIso[2]

#----- Muon SF ----#
CMS_vhbb_eff_m_Wln_13TeV_DOWN: <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF[1]
CMS_vhbb_eff_m_Wln_13TeV_UP: <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF[2]

CMS_vhbb_eff_m_trigger_Wlv_13TeV_DOWN: <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[0]*muonSF_Id[0]*muonSF_trigger[1]
CMS_vhbb_eff_m_ISO_Wlv_13TeV_DOWN:     <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[1]*muonSF_Id[0]*muonSF_trigger[0]
CMS_vhbb_eff_m_MVAID_Wlv_13TeV_DOWN:   <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[0]*muonSF_Id[1]*muonSF_trigger[0]

CMS_vhbb_eff_m_trigger_Wlv_13TeV_UP: <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[0]*muonSF_Id[0]*muonSF_trigger[2]
CMS_vhbb_eff_m_ISO_Wlv_13TeV_UP:     <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[2]*muonSF_Id[0]*muonSF_trigger[0]
CMS_vhbb_eff_m_MVAID_Wlv_13TeV_UP:   <!Weights|weight_noLepSF!>*<!Weights|electronWeight!>*muonSF_Iso[0]*muonSF_Id[2]*muonSF_trigger[0]

[Branches]
;branch that should always be kept in the Nutples
keep_branches = ['event','is*','run', 'sampleIndex', 'LHE_weights_scale_wgt','isData','muTrigSFWeight_doublemu','weight_SF_LooseID','weight_SF_LooseISO','weight_SF_TRK','eTrigSFWeight_doubleEle80x','weight_SF_LooseIDnISO','weight_SF_Lepton','GenJet_pt','GenJet_eta','GenJet_numBHadrons','GenWZQuark_pdgId','weight_SF_LooseIDnISO','weight_SF_LooseIDnISO_B','weight_SF_LooseIDnISO_E','sb_weight_ZeeBDT_highpt','sb_weight_ZuuBDT_highpt','sb_weight_ZeeBDT_lowpt','sb_weight_ZuuBDT_lowpt','sb_weight_ZeeBDTVH_highpt','sb_weight_ZuuBDTVH_highpt','sb_weight_ZeeBDTVH_lowpt','sb_weight_ZuuBDTVH_lowpt','*BDT*','GenJet_hadronFlavour','nAddJet*','minDphiJetMet','Jet_PtReg','Jet_phi','Jet_eta','Jet_mass','MET_Pt','MET_pt','MET_phi','LHE_Nb','LHE_Vpt','nGenStatus2bHad','LHE_HT','LHEScaleWeight','*DNN*','nGenStatus2bHad','GenPart*','DY_specialWeight','weightLO*','H_pt','H_eta','H_mass','V_eta','V_phi','V_pt','V_mass','Jet_btagDeepB[hJidx[0]]','Jet_btagDeepB[hJidx[1]]','hJidx[0]','hJidx[1]','Jet_PtReg[hJidx[0]]','Jet_PtReg[hJidx[1]]','Sum$(Jet_PtReg>30&&abs(Jet_eta)<2.4&&Jet_puId==7&&Jet_jetId>0&&Jet_lepFilter>0)','(H_pt/V_pt)','abs(Jet_eta[hJidx[0]]-Jet_eta[hJidx[1]])','abs(VHbb::deltaPhi(H_phi,V_phi))','MET_Pt','VHbb::deltaR(H_eta,H_phi,V_eta,V_phi)','H_pt_noFSR','H_mass_noFSR','HLT_Ele27_WPTight_Gsf','HLT_IsoMu24','HLT_IsoTkMu24','FitCorr','FitCorr*','EWKW', 'weight*','SoftActivity*','PrefireWeight','bTagWeight*']

[SubmitOptions]


