[TrainRegression]
;;; OK ;;; signals = ZH
;signals = ZH
;signals = ZH_mini
;signals = ZZTo2Q2Nu


signals = ZH_HToBB_ZToLL_M125_pow
name = ZllHbbRegression_<!TrainRegression|signals!>_test
#for evaluation sys
regWeight = ./weights/MVA_BDT_REG_<!TrainRegression|name!>.weights.xml
#regWeight = ./reg/ttbar-G25-500k-13d-300t.weights.xml
#regWeight = ./csv/gravall-v25.weights.xml
#regWeight = ./reg/TMVARegression_BDTG.weights.xml
                        
useVarAbbr = 2 
# 0: always use regDict.values() (regVars are still used as keys for regDef)
# 1: use regVars as abbreviation for regDict.values() (use this if variable attributes "expression" and "label" are different in the xml file)
# 2: always use regVars (use this setting only if the regVars exactly match the variables in the xml file like in ./csv/gravall-v25.weights.xml )

options = !H:V:NTrees=2000:BoostType=Grad:Shrinkage=0.10:UseBaggedGrad:GradBaggingFraction=0.7:nCuts=200:MaxDepth=3:NNodesMax=15

# from silvio
;vars = Alt$(Jet_pt[hJCidx],0)   Alt$(Jet_rawPt[hJCidx],0)   Alt$(rho[hJCidx],0)   Alt$(Jet_eta[hJCidx],0)   VHbb::evalMtFromPtEtaPhiM(Alt$(Jet_pt[hJCidx],0),Alt$(Jet_eta[hJCidx],0),Alt$(Jet_phi[hJCidx],0),Alt$(Jet_mass[hJCidx],0)) Alt$(Jet_leadTrackPt[hJCidx],0)   max(Alt$(Jet_leptonPtRel[hJCidx],0),0)   max(Alt$(Jet_leptonPt[hJCidx],0),0)   max(Alt$(Jet_leptonDeltaR[hJCidx],0),0)   Alt$(Jet_chEmEF[hJCidx],0)   Alt$(Jet_neEmEF[hJCidx],0)   Alt$(Jet_chHEF[hJCidx],0)   Alt$(Jet_neHEF[hJCidx],0)   Alt$(Jet_chMult[hJCidx],0)   Alt$(Jet_vtxNtracks[hJCidx],0)   Alt$(Jet_vtxPt[hJCidx],0)   Alt$(Jet_vtxMass[hJCidx],0)   max(Alt$(Jet_vtx3DVal[hJCidx],0),0)   Alt$(Jet_vtx3DSig[hJCidx],0)


#FSR = FSR_dRCut_idx[0]
;vars = Jet_pt[hJCidx]   nPVs   Jet_eta[hJCidx]   VHbb::evalMtFromPtEtaPhiM(Jet_pt[hJCidx],Jet_eta[hJCidx],Jet_phi[hJCidx],Jet_mass[hJCidx])   Jet_leadTrackPt[hJCidx]   max(Jet_leptonPtRel[hJCidx],0)   max(Jet_leptonPt[hJCidx],0)   max(Jet_leptonDeltaR[hJCidx],0)   Jet_neEmEF[hJCidx]   Jet_neHEF[hJCidx]   Jet_vtxNtracks[hJCidx]   Jet_vtxPt[hJCidx]   max(Jet_vtx3DVal[hJCidx],0)   Jet_vtx3DSig[hJCidx]

#The regVars have to match the keys in regDict and regDef!
regVars = ['Jet_pt','nPVs','Jet_eta','Jet_mt','Jet_leadTrackPt','Jet_leptonPtRel','Jet_leptonPt','Jet_leptonDeltaR','Jet_neHEF','Jet_neEmEF','Jet_vtxPt','Jet_vtx3dL','Jet_vtxNtrk','Jet_vtx3deL']
#regVars = ['Jet_pt','nPVs','Jet_eta','Jet_mt','Jet_leadTrackPt','Jet_leptonPtRel','Jet_leptonPt','Jet_leptonDeltaR','Jet_neHEF','Jet_neEmEF','Jet_vtxPt','Jet_vtx3dL','Jet_vtxNtrk','Jet_vtx3deL','FSR_ptCorr','FSR_deltaR','FSR_perpV']
regDict = { 'Jet_pt': 'Alt$(Jet_pt[hJCidx],0)',
            'nPVs':'nPVs',
            'Jet_eta':'Alt$(Jet_eta[hJCidx],0)',
            'Jet_mt': 'VHbb::evalMtFromPtEtaPhiM(Alt$(Jet_pt[hJCidx],0),Alt$(Jet_eta[hJCidx],0),Alt$(Jet_phi[hJCidx],0),Alt$(Jet_mass[hJCidx],0))',
            'Jet_leadTrackPt': 'Alt$(Jet_leadTrackPt[hJCidx],0)',
            'Jet_leptonPtRel': 'max(Alt$(Jet_leptonPtRel[hJCidx],0),0)',
            'Jet_leptonPt': 'max(Alt$(Jet_leptonPt[hJCidx],0),0)',
            'Jet_leptonDeltaR': 'max(Alt$(Jet_leptonDeltaR[hJCidx],0),0)',
            'Jet_neEmEF': 'Alt$(Jet_neEmEF[hJCidx],0)',
            'Jet_neHEF': 'Alt$(Jet_neHEF[hJCidx],0)',
            'Jet_vtxNtrk': 'Alt$(Jet_vtxNtracks[hJCidx],0)',
            'Jet_vtxPt': 'Alt$(Jet_vtxPt[hJCidx],0)',
            'Jet_vtx3dL': 'max(Alt$(Jet_vtx3DVal[hJCidx],0),0)',
            'Jet_vtx3deL': 'Alt$(Jet_vtx3DSig[hJCidx],0)',
#            'FSR_ptCorr': 'VHbb::FSRCorr_pt(Alt$(Jet_eta[hJCidx],0),Alt$(Jet_phi[hJCidx],0),Alt$(Jet_pt[hJCidx],0),Alt$(Jet_mass[hJCidx],0),Alt$(Jet_eta[FSR_dRCut_idx[0]],0),Alt$(Jet_phi[FSR_dRCut_idx[0]],0),Alt$(Jet_pt[FSR_dRCut_idx[0]],0),Alt$(Jet_mass[FSR_dRCut_idx[0]],0))',
#            'FSR_deltaR': 'Alt$(5-VHbb::deltaR(Jet_eta[hJCidx],Jet_phi[hJCidx],Jet_eta[FSR_dRCut_idx[0]],Jet_phi[FSR_dRCut_idx[0]]),0)',
#            'FSR_perpV': 'Alt$(TMath::Log10(Jet_perpV[FSR_dRCut_idx[0]]),0)'
       }
#for evaluation sys. Variables defined to (lambda tree, jet: 0) are redefined in JetEnergySystematics.py.
#The definition of the variables Jet_pt, Jet_eta, Jet_phi, Jet_m will be overwritten as well!
regDef = {  'Jet_pt':        (lambda tree, jet: tree.Jet_pt[jet]),
            'nPVs':          (lambda tree, jet: tree.nPVs),
            'Jet_eta':       (lambda tree, jet: tree.Jet_eta[jet]),
            'Jet_mt':        (lambda tree, jet: 0),
            'Jet_leadTrackPt': (lambda tree, j: tree.Jet_leadTrackPt[j]),
            'Jet_leptonPtRel': (lambda tree, j: max(tree.Jet_leptonPtRel[j],0.)),
            'Jet_leptonPt':  (lambda tree, j: max(tree.Jet_leptonPt[j],0.)),
            'Jet_leptonDeltaR': (lambda tree, j: max(tree.Jet_leptonDeltaR[j],0.)),
            'Jet_neEmEF':    (lambda tree, j: tree.Jet_neEmEF[j]),
            'Jet_neHEF':     (lambda tree, j: tree.Jet_neHEF[j]),
            'Jet_vtxNtrk':   (lambda tree, j: tree.Jet_vtxNtracks[j]),
            'Jet_vtxPt':     (lambda tree, j: tree.Jet_vtxPt[j]),
            'Jet_vtx3dL':    (lambda tree, j: max(tree.Jet_vtx3DVal[j],0.)),
            'Jet_vtx3deL':   (lambda tree, j: tree.Jet_vtx3DSig[j])
       }
;vars = Alt$(Jet_pt[hJCidx],0)   nPVs   Alt$(Jet_eta[hJCidx],0)   Alt$(Jet_mt[hJCidx],0)   Alt$(Jet_leadTrackPt[hJCidx],0)   max(Alt$(Jet_leptonPtRel[hJCidx],0),0)   max(Alt$(Jet_leptonPt[hJCidx],0),0)   max(Alt$(Jet_leptonDeltaR[hJCidx],0),0)   Alt$(Jet_neEmEF[hJCidx],0)   Alt$(Jet_neHEF[hJCidx],0)   Alt$(Jet_vtxNtracks[hJCidx],0)   Alt$(Jet_vtxPt[hJCidx],0)   max(Alt$(Jet_vtx3DVal[hJCidx],0),0)   Alt$(Jet_vtx3DSig[hJCidx],0)   VHbb::DiffSumToJet_pt(Alt$(Jet_eta[hJCidx],0),Alt$(Jet_phi[hJCidx],0),Alt$(Jet_pt[hJCidx],0),Alt$(Jet_mass[hJCidx],0),Alt$(Jet_eta[<!TrainRegression|FSR!>],0),Alt$(Jet_phi[<!TrainRegression|FSR!>],0),Alt$(Jet_pt[<!TrainRegression|FSR!>],0),Alt$(Jet_mass[<!TrainRegression|FSR!>],0))   Alt$(VHbb::deltaR(Jet_eta[hJCidx],Jet_phi[hJCidx],Jet_eta[<!TrainRegression|FSR!>],Jet_phi[<!TrainRegression|FSR!>]),0)   Alt$(Jet_perpV[<!TrainRegression|FSR!>],0)
# zllhbb run1
; vars = Jet_pt[hJCidx] VHbb::evalJERBias(Jet_rawPt[hJCidx],Jet_mcPt[hJCidx],Jet_eta[hJCidx]) Jet_eta[hJCidx] Jet_leadTrackPt[hJCidx] max(0,Jet_vtx3DVal[hJCidx]) max(0,Jet_vtx3DSig[hJCidx]) max(0,Jet_vtxMass[hJCidx]) max(0,Jet_vtxPt[hJCidx]) Jet_chHEF[hJCidx] Jet_chEmEF[hJCidx] Jet_neHEF[hJCidx] Jet_neHEF[hJCidx] Jet_chMult[hJCidx] Jet_mult[hJCidx] max(0,(Jet_leptonPtRel[hJCidx])) max(0,(Jet_leptonPt[hJCidx])) max(0,(Jet_leptonDeltaR[hJCidx]))


;cut = Jet_mcIdx[1]==1 && abs(Jet_mcFlavour[1])==5 && (Jet_mcMatchId[1]==23||Jet_mcMatchId[1]==25) && Sum$(Jet_mcIdx[hJCidx]==1)>0

;cut = Sum$((Jet_mcMatchId[hJCidx]==25||Jet_mcMatchId[hJCidx]==23)  && abs(Jet_mcFlavour[hJCidx] )==5 && Jet_mcIdx[hJCidx] >=0)==2

cut = Sum$(Jet_btagCMVA[hJCidx] > 0 && abs(Jet_eta[hJCidx]) < 2.4 && Jet_pt[hJCidx] > 20 && Jet_mcIdx[hJCidx] >= 0 && (Jet_mcMatchId[hJCidx]==25||Jet_mcMatchId[hJCidx]==23) && abs(Jet_mcFlavour[hJCidx])==5 )==2 && FSR_dRCut_idx[0] >= 0

;cut = Sum$(Jet_btagCMVA[hJCidx] > 0 && abs(Jet_eta[hJCidx]) < 2.4 && Jet_pt[hJCidx] > 20 && Jet_mcIdx[hJCidx] >= 0 && abs(Jet_mcFlavour[hJCidx])==5 )==2
;cut = Jet_mcIdx[hJCidx[1]]>=0 & abs(Jet_eta[hJCidx[1]]) < 2.4 & Jet_btagCSV[hJCidx[1]] > 0.0 & Jet_chHEF[hJCidx[1]] > 0. & Jet_puId[hJCidx[1]]>0 & abs(Jet_mcFlavour[hJCidx[1]])==5 & (Jet_mcMatchId[hJCidx[1]]==23||Jet_mcMatchId[hJCidx[1]]==25)

;cut = Sum$(Jet_mcIdx[0]>=0 & abs(Jet_eta[0]) < 2.4 & Jet_btagCSV[0] > 0.0 & Jet_chHEF[0] > 0. & Jet_puId[0]>0 & abs(Jet_mcFlavour[0])==5 & (Jet_mcMatchId[0]==23||Jet_mcMatchId[0]==25))==2

trainCut = (evt%%2==0)
testCut = (evt%%2==1)
weight = 1
;target = Jet_mcPt
;target = Alt$(GenBQuarkFromH_pt[(5-Jet_mcFlavour[hJCidx])/10],0)
target = Alt$(GenJet_wNuPt[Jet_mcIdx[hJCidx]],0)

;target = GenJet_wNuPt[Jet_mcIdx[hJCidx]]
;target = Jet_mcPt[0]

